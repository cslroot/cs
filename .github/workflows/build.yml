name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR: ${{github.workspace}}/build
  VCPKG_ROOT: ${{github.workspace}}/third/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/third/vcpkg/bincache

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        config: [Debug, Release]
        include:
          - os: windows-latest
            preset: windows-cl-x64-ninja
            build-preset: windows-cl-x64-ninja-${{matrix.config}}
            build: ${{matrix.config}}
            triplet: x64-windows
          - os: ubuntu-latest
            preset: clang-x64-ninja
            build-preset: clang-x64-ninja-${{matrix.config}}
            build: ${{matrix.config}}
            triplet: x64-linux
          - os: macos-latest
            preset: clang-x64-ninja
            build-preset: clang-x64-ninja-${{matrix.config}}
            build: ${{matrix.config}}
            triplet: x64-osx

    steps:
    - name: "check out repo with vcpkg as submodule"
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: "setup ninja"
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash

    - name: Cache/Restore vcpkg
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
          !${{ env.VCPKG_ROOT }}/installed
        key: |
          ${{ hashFiles('vcpkg.json') }}-${{ hashFiles('.git/modules/third/vcpkg/HEAD') }}-${{ matrix.triplet }}

    - name: Add msbuild to PATH(Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Configure build for amd64(Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Add packages(Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxmu-dev libxi-dev libgl-dev  # for glew
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev  # for glfw
        sudo apt-get install -y libgl1-mesa-dev
        sudo apt-get install -y mesa-utils freeglut3-dev
        # apt list | grep -i gl
        xvfb-run glxinfo | grep -i OpenGL


    - name: cmake configure
      run: |
        cmake --preset "${{matrix.preset}}"

    - name: cmake build
      run: |
        cmake --build --preset "${{matrix.build-preset}}"

    # - name: Test
    #   run: ctest -C release
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: "artifacts_${{ runner.os }}"
        path: "build/${{matrix.preset}}/bin/${{matrix.build}}"

