name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_DIR: ${{github.workspace}}/build
  VCPKG_ROOT: ${{github.workspace}}/third/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/third/vcpkg/bincache

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            preset: windows-cl-x64-ninja
            triplet: x64-windows
          - os: ubuntu-latest
            preset: clang-x64-ninja
            triplet: x64-linux
          - os: macos-latest
            preset: clang-x64-ninja
            triplet: x64-osx

    steps:
    - name: "check out repo with vcpkg as submodule"
      uses: actions/checkout@v3
      with:
        # to use vcpkg as submodule
        submodules: recursive

    - name: "setup ninja"
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash

    - name: Cache/Restore vcpkg
      id: cache-vcpkg
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
          !${{ env.VCPKG_ROOT }}/installed
        key: |
          vcpkg-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('.git/modules/third/vcpkg/HEAD') }}
        restore-keys: |
          vcpkg-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-
          vcpkg-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.triplet }}-
          vcpkg-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-
        # CACHE_VERSION is used to clear cache explicitly

    # REMARK: setup-msbuild doesn't expose cl.exe into PATH.
    # Then use ilammy/msvc-dev-cmd
    # - name: Add msbuild to PATH(Windows)
    #   if: runner.os == 'Windows'
    #   uses: microsoft/setup-msbuild@v1.1

    - name: Configure build for amd64(Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Add packages(Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxmu-dev libxi-dev libgl-dev  # for glew
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev  # for glfw
        sudo apt-get install -y libgl1-mesa-dev
        sudo apt-get install -y mesa-utils freeglut3-dev
        # apt list | grep -i gl
        xvfb-run glxinfo | grep -i OpenGL


    - name: cmake configure
      run: |
        cmake --preset "${{matrix.preset}}"

    - name: cmake build
      run: |
        cmake --build --preset "${{matrix.preset}}-Debug"
        cmake --build --preset "${{matrix.preset}}-Release"

    - name: Test
      run: ctest --preset "${{matrix.preset}}"
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: "artifacts_${{ runner.os }}"
        path: "build/${{matrix.preset}}/bin"

    - name: Setup OpenCppCoverage and add to PATh
      if: runner.os == 'Windows'
      id: setup_opencppcoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Generate Report
      if: runner.os == 'Windows'
      id: generate_test_report
      shell: cmd
      run: OpenCppCoverage --sources src --modules=build\${{matrix.preset}}\bin\Debug\cs.* --export_type cobertura:cs.xml -- .\build\${{matrix.preset}}\bin\Debug\cs.test.exe

    - name: Upload Report to Codecov
      if: runner.os == 'Windows'
      uses: codecov/codecov-action@v2
      with:
        files: ./cs.xml
        fail_ci_if_error: true
        functionalities: fix
