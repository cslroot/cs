# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '21 8 * * 1'

env:
  VCPKG_ROOT: ${{github.workspace}}/third/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/third/vcpkg/bincache

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    # - run: |
    #     make bootstrap
    #     make release

    - name: "setup ninja"
      uses: seanmiddleditch/gha-setup-ninja@master
    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash

    - name: Cache/Restore vcpkg
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
          !${{ env.VCPKG_ROOT }}/installed
        key: |
          ${{ hashFiles('vcpkg.json') }}-${{ hashFiles('.git/modules/third/vcpkg/HEAD') }}-${{ matrix.triplet }}

    - name: Add msbuild to PATH(Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Configure build for amd64(Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Add packages(Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxmu-dev libxi-dev libgl-dev  # for glew
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev  # for glfw
        sudo apt-get install -y libgl1-mesa-dev
        sudo apt-get install -y mesa-utils freeglut3-dev

    - name: cmake
      run: |
        cmake --preset "clang-x64-ninja" && \
        cmake --build --preset "clang-x64-ninja-Debug"


    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
